#
# Makefile fragment for FOS kernel.
# This is NOT a complete makefile;
# you must run GNU make in the top-level directory
# where the GNUmakefile is located.
#

OBJDIRS += kern

KERN_LDFLAGS := $(LDFLAGS) -T kern/kernel.ld -nostdlib

# entry.S must be first, so that it's the first code in the text segment!!!
#
# We also snatch the use of a couple handy source files
# from the lib directory, to avoid gratuitous code duplication.

#[TODO: Need Better Solution]
# ANY NEW ADDED FILE INSIDE ANY OF THE SUBDIR NEED TO BE TEMPORARILY MODIFIED (USING touch COMMAND) INSIDE "GNUmakefile" TO FORCE BUILDING THEM EACH TIME (el7 :))
# OTHERWISE, ANY CHANGE IN ANY .h FILE IN THE ENTIRE CODE WILL NOT REFLECT ON ANY OF THESE "kern/*/*" FILES

KERN_SRCFILES :=	kern/entry.S \
			kern/init.c \
			kern/cons/console.c \
			kern/cons/printf.c \
			kern/cmd/command_prompt.c \
			kern/cmd/commands.c  \
			kern/disk/pagefile_manager.c \
			kern/cpu/kclock.c \
			kern/cpu/sched_helpers.c \
			kern/cpu/sched.c \
			kern/cpu/picirq.c \
			kern/mem/boot_memory_manager.c \
			kern/mem/memory_manager.c \
			kern/mem/shared_memory_manager.c \
			kern/mem/kheap.c \
			kern/mem/paging_helpers.c \
			kern/mem/working_set_manager.c \
			kern/mem/chunk_operations.c \
			kern/proc/user_environment.c \
			kern/proc/priority_manager.c \
			kern/proc/user_programs.c  \
			kern/trap/trap.c \
			kern/trap/trapentry.S \
			kern/trap/syscall.c \
			kern/trap/kdebug.c \
			kern/trap/fault_handler.c  \
			kern/conc/semaphore_manager.c \
			kern/tests/tst_handler.c \
			kern/tests/test_dynamic_allocator.c \
			kern/tests/test_working_set.c \
			kern/tests/test_commands.c \
			kern/tests/test_priority.c \
			kern/tests/test_kheap.c \
			kern/tests/utilities.c \
			lib/printfmt.c \
			lib/readline.c \
			lib/string.c \
			lib/disk.c \
			lib/dynamic_allocator.c \




# Only build files if they exist.
KERN_SRCFILES := $(wildcard $(KERN_SRCFILES))



KERN_OBJFILES := $(patsubst %.c, $(OBJDIR)/%.o, $(KERN_SRCFILES))
KERN_OBJFILES := $(patsubst %.S, $(OBJDIR)/%.o, $(KERN_OBJFILES))
KERN_OBJFILES := $(patsubst obj/lib/%, obj/kern/%, $(KERN_OBJFILES))

KERN_BINFILES := $(wildcard user/*.c)

KERN_BINFILES := $(patsubst %.c, $(OBJDIR)/%, $(KERN_BINFILES))

# How to build kernel object files
$(OBJDIR)/kern/%.o: kern/%.c
	@echo + cc $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<

$(OBJDIR)/kern/%.o: kern/%.S
	@echo + as $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<

$(OBJDIR)/kern/%.o: lib/%.c
	@echo + cc $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<

# How to build the kernel itself
$(OBJDIR)/kern/kernel: $(KERN_OBJFILES) $(KERN_BINFILES) kern/kernel.ld
	@echo + ld -m elf_i386 $@
	$(V)$(LD) -o $@ $(KERN_LDFLAGS) $(KERN_OBJFILES) $(GCC_LIB) -b binary $(KERN_BINFILES)
	$(V)$(OBJDUMP) -S $@ > $@.asm
	$(V)$(NM) -n $@ > $@.sym

# How to build the Bochs disk image (210000)
$(OBJDIR)/kern/bochs.img: $(OBJDIR)/kern/kernel $(OBJDIR)/boot/boot
	@echo + mk $@
	$(V)dd if=/dev/zero of=$(OBJDIR)/kern/bochs.img~ count=1110000 2>/dev/null
	$(V)dd if=$(OBJDIR)/boot/boot of=$(OBJDIR)/kern/bochs.img~ conv=notrunc 2>/dev/null
	$(V)dd if=$(OBJDIR)/kern/kernel of=$(OBJDIR)/kern/bochs.img~ seek=1 conv=notrunc 2>/dev/null
	$(V)mv $(OBJDIR)/kern/bochs.img~ $(OBJDIR)/kern/bochs.img

all: $(OBJDIR)/kern/bochs.img


grub: $(OBJDIR)/fos-grub

$(OBJDIR)/fos-grub: $(OBJDIR)/kern/kernel
	@echo + oc $@
	$(V)$(OBJCOPY) --adjust-vma=0x10000000 $^ $@
